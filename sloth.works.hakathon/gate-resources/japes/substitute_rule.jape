Phase:	RuleSubstitute
Input:  AlineaArticleMention KeywordText KeywordWith KeywordIn KeywordSubstitute Token
Options: control = first

Rule:RuleSubstitute
Priority: 10
(
  {KeywordIn}
  ({AlineaArticleMention}):aam
  {KeywordText}
  ({Token.string=="„"}):startA
  ({Token})+
  ({Token.string=="“"}):endA
  {Token.stem=="се"}
  {KeywordSubstitute}
  {KeywordWith}
  ({Token.string=="„"}):startB
  ({Token})+
  ({Token.string=="“"}):endB
):ruleMatch
-->
  {
         AnnotationSet rule = bindings.get("ruleMatch");

         AnnotationSet articleAlineaMention = bindings.get("aam");
         Annotation aaMention = articleAlineaMention.iterator().next();

         AnnotationSet startA = bindings.get("startA");
         Annotation startAPoint = startA.iterator().next();

         AnnotationSet endA = bindings.get("endA");
         Annotation endAPoint = endA.iterator().next();

         AnnotationSet startB = bindings.get("startB");
         Annotation startBPoint = startB.iterator().next();

         AnnotationSet endB = bindings.get("endB");
         Annotation endBPoint = endB.iterator().next();

         try {
             FeatureMap features = Factory.newFeatureMap();
             features.put("what", gate.Utils.cleanStringFor(doc, startAPoint.getEndNode().getOffset(),
                     endAPoint.getStartNode().getOffset()));
             features.put("withWhat", gate.Utils.cleanStringFor(doc, startBPoint.getEndNode().getOffset(),
                     endBPoint.getStartNode().getOffset()));
             features.put("article_number", aaMention.getFeatures().get("article_number"));
             features.put("alinea_number", aaMention.getFeatures().get("alinea_number"));

             features.put("rule", "RuleSubstitute");

             outputAS.add(rule.firstNode().getOffset(), rule.lastNode().getOffset(), "RuleSubstitute", features);
         } catch (Exception e) {
             e.printStackTrace();
         }
  }
